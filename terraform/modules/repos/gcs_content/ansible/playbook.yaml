- name: "Install Kanban"
  hosts: 127.0.0.1

  handlers:
    - name: reload-nginx
      service:
        name: nginx
        state: restarted
        enabled: true
    - name: reload-php-fpm
      service:
        name: php8.1-fpm
        state: restarted
        enabled: true
    - name: restart-logging
      service:
        name: google-cloud-ops-agent-fluent-bit
        state: restarted
        enabled: true
    - name: restart-monitoring
      service:
        name: google-cloud-ops-agent-opentelemetry-collector
        state: restarted
        enabled: true
    - name: restart-ops
      service:
        name: google-cloud-ops-agent
        state: restarted
        enabled: true

  pre_tasks:
    - name: Ensure this playbook is updated costantly (also as first step so that we can retry)
      tags: [ "always" ]
      ansible.builtin.cron:
        name: "Update confs every 5 minutes"
        minute: "*/5"
        hour: "*"
        job: "sh -c /opt/installer/rerun.sh >/dev/null"
        user: root

    - name: Ensure this playbook is updated costantly (also as first step so that we can retry)
      tags: [ "always" ]
      ansible.builtin.cron:
        name: "Update confs at reboot"
        special_time: reboot
        job: "sh -c /opt/installer/rerun.sh >/dev/null"
        user: root

    - name: Update the reconfiguration script
      tags: [ "always" ]
      ansible.builtin.template:
        src: rerun.sh.j2
        dest: "/opt/installer/rerun.sh"
        owner: '0'
        group: '0'
        mode: '0755'

      notify:
        - reload-php-fpm
        - reload-nginx

    - name: install requirements
      apt:
        package:
        - nginx
        - php-fpm
        - php-mysql
        - php-pgsql
        - php-gd
        - php-mbstring
        - php-sqlite3
        - php-xml
        - php-zip
        - jq
        - curl
        - postgresql-client
    - name: Update the reconfiguration script
      tags: [ "always" ]
      ansible.builtin.template:
        src: nginx_default.j2
        dest: "/etc/nginx/sites-available/default"
        owner: '0'
        group: '0'
        mode: '0644'
    - name: Enable nginx
      tags: [ "always" ]
      ansible.builtin.service:
        name: nginx
        enabled: true
        state: restarted
    - name: gather myip
      tags: [ "always" ]
      shell: curl -s ipinfo.io |jq -r .ip
      register: myip
    - name: "Values decripted"
      vars:
        resolved_ip: "{{ lookup( 'community.general.dig', url ) }}"
      debug:
        msg: "Public url is {{url}}, that resolve at IP {{ resolved_ip }} and my ip is {{myip.stdout}}"
    - name: "I'm a standalone server"
      when:
        - lookup('community.general.dig', url ) == myip.stdout
      debug:
        msg: "I'm going to be a standalone server at {{url}}"
    - name: "I'm a pool server"
      when:
        - not lookup('community.general.dig', url ) == myip.stdout
      debug:
        msg: "I'm going to be a pool server at {{url}}"

  tasks:
    - name: Adding  Logs
      ansible.builtin.copy:
        content: |
          logging:
            receivers:
              syslog:
                type: files
                include_paths:
                - /var/log/messages
                - /var/log/syslog
                - /var/log/caddy/*.log
                - /var/log/nginx/*.log
                - /var/log/php*-fpm.log
                - /var/log/cloud-init.log
                - /var/log/cloud-init-output.log
                - /opt/installer/logs/all.out
            service:
              pipelines:
                default_pipeline:
                  receivers: [syslog]
            processors:
              digest_json:
                type: parse_json
          metrics:
            receivers:
              hostmetrics:
                type: hostmetrics
                collection_interval: 60s
            processors:
              metrics_filter:
                type: exclude_metrics
                metrics_pattern: []
            service:
              pipelines:
                default_pipeline:
                  receivers: [hostmetrics]
                  processors: [metrics_filter]
        dest: /etc/google-cloud-ops-agent/config.yaml
      notify:
        - restart-logging
        - restart-monitoring
        - restart-ops
    - name: Enable nginx
      tags: [ "always" ]
      ansible.builtin.service:
        name: nginx
        enabled: true
        state: started

    - name: Enable php-fpm
      tags: [ "always" ]
      ansible.builtin.service:
        name: php8.1-fpm
        enabled: true
        state: started

    - name: Delete default file html
      tags: [ "always" ]
      ansible.builtin.file:
        path: /var/www/html/index.nginx-debian.html
        state: absent

    - name: Check if Kanban is installed
      tags: [ "always" ]
      ansible.builtin.stat:
        path: /var/www/html/index.php
      register: index_php

    - name: Running API
      uri:
        url: https://api.github.com/repos/kanboard/kanboard/releases/latest
        method: GET
        return_content: yes
      register: kanboard

    - name: Unarchive a file that needs to be downloaded (added in 2.0)
      ansible.builtin.unarchive:
        src: "https://github.com/kanboard/kanboard/archive/{{ kanboard.json.tag_name }}.tar.gz"
        dest: /var/www/html
        remote_src: yes
        extra_opts: [--strip-components=1]
      when: not index_php.stat.exists

    - name: set correct permission in web dir
      tags: [ "always" ]
      file:
        dest: /var/www/html
        owner: www-data
        group: www-data
        mode: u=rwX,g=rX,o=rX
        recurse: yes

    - name: gather config.php
      shell: gcloud secrets versions access  latest --secret="config_php"
      register: config_php

    - name: write config.php
      ansible.builtin.copy:
        content: "{{config_php.stdout}}"
        dest: /var/www/html/config.php
        owner: 'www-data'
        group: 'www-data'
        mode: u=rwX,g=rX,o=rX

    # - name: Update the reconfiguration script
    #   tags: [ "always" ]
    #   ansible.builtin.template:
    #     src: config.php.j2
    #     dest: "/var/www/html/config.php"
    #     owner: 'www-data'
    #     group: 'www-data'
    #     mode: u=rwX,g=rX,o=rX

    - name: Delete default config html
      tags: [ "always" ]
      ansible.builtin.file:
        path: /var/www/html/config.default.php
        state: absent

    - name: Running API
      uri:
        url: https://kanboard.org/plugins.json
        method: GET
        return_content: true
      register: kanboard_s3

    - name: Install plugins
      tags: [ "always" ]
      become: true
      become_method: su
      become_user: www-data
      become_flags: '-s /bin/sh'
      ansible.builtin.shell: |
        cd /var/www/html;
        ./cli plugin:install {{ kanboard_s3.json.s3.download }}

  roles:
    - name: Install google logging
      role: googlecloudplatform.google_cloud_ops_agents
      vars:
        agent_type: ops-agent
    - name: Configuring Caddy for ssl reverse
      role: maxhoesel.caddy.caddy_server
      become: true
      when:
        - lookup('community.general.dig', url ) == myip.stdout
      vars:
        caddy_config_mode: "Caddyfile"
        caddy_caddyfile: |
            {{url}}
            reverse_proxy http://127.0.0.1:8080
            log {
              output file /var/log/caddy/access.log
            }

    - name: Configuring Caddy for plain catchall
      role: maxhoesel.caddy.caddy_server
      become: true
      when:
        - not lookup('community.general.dig', url) == myip.stdout
      vars:
        caddy_config_mode: "Caddyfile"
        caddy_caddyfile: |
            *:80
            reverse_proxy http://127.0.0.1:8080
            log {
              output file /var/log/caddy/access.log
            }

  post_tasks:
    - name: reload-caddy
      service:
        name: caddy
        state: reloaded
        enabled: true